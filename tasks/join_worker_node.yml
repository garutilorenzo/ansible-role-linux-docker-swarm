---

- name: "set fact: first Swarm manager host"
  ansible.builtin.set_fact:
    first_swarm_manager_host: "{{ groups['swarm_managers'][0] }}"
    
- name: 'set fact: list remote_addrs'
  ansible.builtin.set_fact:
    # Create a list of all managers' private ip addresse
    list_remote_addrs: "{{ list_remote_addrs | default([]) + [item  + ':2377' | string] }}"
  loop: >-
    {{ groups['swarm_managers'] | map('extract', hostvars, ['ansible_' + swarm_iface, 'ipv4'] )  | map(attribute='address') }}

- ansible.builtin.debug:
    msg: "list_remote_addrs: {{ list_remote_addrs }}"
  when: debug_enabled is defined and debug_enabled

- name: "Check if swarm cluster exists"
  ansible.builtin.stat:
    path: /var/lib/docker/swarm/state.json
  register: swarm_state_file

- name: Join Workers
  # Similar to a Try/Except
  # https://docs.ansible.com/ansible/latest/user_guide/playbooks_blocks.html#blocks-error-handling
  block:
    - name: Joining worker to the swarm
      # https://docs.ansible.com/ansible/latest/modules/docker_swarm_module.html
      community.docker.docker_swarm:
        state: join
        timeout: 60
        # Using PRIVATE IP ADDRESS as they are in the same VPC
        advertise_addr: >-
          {{ swarm_ip_address }}:2377
        # hostvars contains all variables related to a host
        # https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#accessing-information-about-other-hosts-with-magic-variables
        join_token: >-
          {{ hostvars[first_swarm_manager_host].join_token_worker }}
        # Using PRIVATE IP ADDRESS as they are in the same VPC
        remote_addrs: "{{ list_remote_addrs }}"
  rescue:
    - name: Joining worker to the swarm
      # https://docs.ansible.com/ansible/latest/modules/command_module.html
      ansible.builtin.command: "docker swarm join --token {{ hostvars[first_swarm_manager_host].join_token_worker }} {{ hostvars[first_swarm_manager_host].swarm_ip_address }}"
      ignore_errors: yes
  when: not swarm_state_file.stat.exists